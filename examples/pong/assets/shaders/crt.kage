package main

func curveUV(uv vec2) vec2 {
    uv = uv * 2.0 - 1.0
    offset := abs(uv.yx) / vec2(3)
    uv = uv + uv * offset * offset
    uv = uv * 0.5 + 0.5

    return uv
}

func scanLineIntensity(uv float, resolution float, opacity float) vec4 {
    intensity := sin(uv * resolution * 3.14 * 800.0)
    intensity = ((0.5 * intensity) + 0.5) * 0.9 + 0.1
    return vec4(vec3(pow(intensity, opacity)), 1.0)
}

func vignetteIntensity(uv vec2, resolution vec2, opacity float, roundness float) vec4 {
    intensity := uv.x * uv.y * (1.0 - uv.x) * (1.0 - uv.y)
    return vec4(vec3(clamp(pow((resolution.x / roundness) * intensity, opacity), 0.0, 1.0)), 1.0)
}

func Fragment(_ vec4, texCoords vec2, _ vec4) vec4 {
    origin, size := imageSrcRegionOnTexture()
    uv := ((texCoords - origin) / size)
    color := imageSrc0At(texCoords)
    
    uv = curveUV(uv)
    
    if (uv.x < 0.0 || uv.y < 0.0 || uv.x > 1.0 || uv.y > 1.0){
        color = vec4(0.0, 0.0, 0.0, 1.0)
    }

    color *= vignetteIntensity(uv, size, 0.3, 8)

    color *= scanLineIntensity(uv.x, size.y, 1)

    color *= scanLineIntensity(uv.y, size.x, 1)
    
    color *= vec4(vec3(6), 1.0)

    return color
}